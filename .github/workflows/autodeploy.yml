# This is a basic workflow to help you get started with Actions

name: autodeploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ autodeploy ]
  pull_request:
    branches: [ autodeploy ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
        configuration: ${{ steps.branch-commit.outputs.configuration }}
        branch: ${{ steps.ec2.outputs.short_ref }}
        instance: ${{ steps.branch-commit.outputs.instance }}
        hosts: ${{ steps.branch-commit.outputs.hosts }}
        bucket: ${{ steps.branch-commit.outputs.bucket }}
        instance_data_value: ${{ steps.ec2.outputs.INSTANCE_DEV }} 
        run_frontend_jobs: ${{ steps.frontend.outputs.ui}}
        run_backend_jobs: ${{ steps.Backend.outputs.backend }}
        microservices: ${{ steps.microservice.outputs.microservices }}
        container : ${{ steps.microservice.outputs.featuremanager }} 
                ${{ steps.microservice.outputs.entitymanager }} 
                ${{ steps.microservice.outputs.flowmanager }} 
                ${{ steps.microservice.outputs.microflowmanager }} 
                ${{ steps.microservice.outputs.menubuildermanager }}
                ${{ steps.microservice.outputs.screenmanager }} 
                ${{ steps.microservice.outputs.securitymanager }} 
                ${{ steps.microservice.outputs.camundasvc }} 
                ${{ steps.microservice.outputs.Authproxy }}
                ${{ steps.microservice.outputs.templatemanager }} 
                ${{ steps.microservice.outputs.apigateway }} 
                ${{ steps.microservice.outputs.projectmanager }} 
                ${{ steps.microservice.outputs.deletemanager }}
                ${{ steps.microservice.outputs.githubmanager }} 
                ${{ steps.microservice.outputs.screengenmanager }} 
                ${{ steps.microservice.outputs.mongogenmanager }}
                ${{ steps.microservice.outputs.admingenmanager }}
                ${{ steps.microservice.outputs.nodegenmanager }}
                ${{ steps.microservice.outputs.datastoremanager }} 
                ${{ steps.microservice.outputs.inframanager }} 
                ${{ steps.microservice.outputs.generationmanager }} 
                ${{ steps.microservice.outputs.frontgenmanager }}
                ${{ steps.microservice.outputs.backendgenmanager }} 
                ${{ steps.microservice.outputs.angulargenmanager }} 
                ${{ steps.microservice.outputs.angtemplatemanager }} 
                ${{ steps.microservice.outputs.reactgenmanager }}
                ${{ steps.microservice.outputs.authgenmanager }}
                ${{ steps.microservice.outputs.codegenmanager }} 
                ${{ steps.microservice.outputs.ionicmanager }} 
                ${{ steps.microservice.outputs.swaggergenmanager }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world! hi San
      - name: Instance State
        id: ec2
        run: |
          echo "::set-output name=INSTANCE_DEV::$(aws ec2 describe-instances --instance-ids i-082c02e8aa3853a62 | jq '.Reservations[].Instances[].State.Name')"
          echo "::set-output name=INSTANCE_STAGE::$(aws ec2 describe-instances --instance-ids i-09c99dd87883bc185 | jq '.Reservations[].Instances[].State.Name')"
          echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: branch check dev and stage
        id: branch-commit
        run: |
          if [ ${{steps.ec2.outputs.short_ref}} == 'dev' ]; then
          echo "::set-output name=instance::${{ steps.ec2.outputs.INSTANCE_DEV }}" 
          echo "::set-output name=hosts::ubuntu@ec2-34-197-46-177.compute-1.amazonaws.com"
          echo "::set-output name=bucket::geppetto-dev"
          echo "::set-output name=configuration::devops"
          elif [ ${{steps.ec2.outputs.short_ref}} == 'stage' ]; then
          echo "::set-output name=instance::${{steps.ec2.outputs.INSTANCE_STAGE}}" 
          echo "::set-output name=hosts::ubuntu@ec2-34-199-109-78.compute-1.amazonaws.com"
          echo "::set-output name=bucket::geppetto-stage"
          echo "::set-output name=configuration::production" 
          fi
      - name:  Status of Instance 
        run: |
          echo ${{steps.ec2.outputs.short_ref}} "is" ${{ steps.branch-commit.outputs.instance }}
      - uses: actions/checkout@v2
      - name: Check for changes
        id: diff
        run: |
          if [ $GITHUB_BASE_REF ]; then
          git fetch origin $GITHUB_BASE_REF --depth=1
          export FILE_DIFF=$( git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )
          echo "Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
          else
          git fetch origin ${{ github.event.before }} --depth=1
          export FILE_DIFF=$( git diff --name-only ${{ github.event.before }} $GITHUB_SHA )
          echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
          fi
          echo "$FILE_DIFF"
          echo "::set-output name=diff::$( echo "$FILE_DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
      - name: UI to build function
        id: frontend
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory != application/clients/desktop/* ]]; then
            echo "::set-output name=ui::notcommited" 
            continue
          else
            echo "::set-output name=ui::commited"
            break
          fi
          done <<< "$FILE_DIFF"
      - name: Backend function to build
        if: ${{ steps.branch-commit.outputs.instance }} == '"running"'
        id: Backend
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory != application/services/* && $directory != generator/services/*  ]]; then
            echo "::set-output name=backend::notcommited" 
            continue
          else
            echo "::set-output name=backend::commited"
            break
          fi
          done <<< "$FILE_DIFF"
      - name: Microservices to check run
        if: steps.Backend.outputs.backend == 'commited'
        id: microservice
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory == application/services/featuremanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=featuremanager::featuremanager"
            continue
          elif [[ $directory == application/services/entitymanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=entitymanager::entitymanager"
            continue
          elif [[ $directory == application/services/flowmanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=flowmanager::flowmanager"
            continue
          elif [[ $directory == application/services/microflowmanager/* ]]; then
            echo "::set-output name=bacmicroserviceskend::commited" 
            echo "::set-output name=microflowmanager::microflowmanager"
            continue
          elif [[ $directory == application/services/menubuildermanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=menubuildermanager::menubuildermanager"
            continue
          elif [[ $directory == application/services/screenmanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=screenmanager::screenmanager"
            continue
          elif [[ $directory == application/services/securitymanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=securitymanager::securitymanager"
            continue
          elif [[ $directory == application/services/Camunda/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=camundasvc::camundasvc"
            continue
          elif [[ $directory == application/services/Auth-Proxy/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=Authproxy::authproxy"
            continue
          elif [[ $directory == application/services/templatemanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=templatemanager::templatemanager"
            continue
          elif [[ $directory == application/services/apigateway/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=apigateway::apigateway" 
            continue
          elif [[ $directory == application/services/projectmanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=projectmanager::projectmanager"
            continue
          elif [[ $directory == application/services/deletemanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=deletemanager::deletemanager"
            continue
          elif [[ $directory == generator/services/github-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=githubmanager::githubmanager" 
            continue
          elif [[ $directory == generator/services/screen-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=screengenmanager::screengenmanager" 
            continue
          elif [[ $directory == generator/services/mongo-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=mongogenmanager::mongogenmanager" 
            continue
          elif [[ $directory == generator/services/Admin-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=admingenmanager::admingenmanager" 
            continue
          elif [[ $directory == generator/services/node-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=nodegenmanager::nodegenmanager" 
            continue
          elif [[ $directory == generator/services/datastore-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=datastoremanager::datastoremanager" 
            continue
          elif [[ $directory == generator/services/infrastructure-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=inframanager::inframanager" 
            continue
          elif [[ $directory == generator/services/generation-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=generationmanager::generationmanager" 
            continue
          elif [[ $directory == generator/services/frontend-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=frontgenmanager::frontgenmanager" 
            continue
          elif [[ $directory == generator/services/backend-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=backendgenmanager::backendgenmanager" 
            continue
          elif [[ $directory == generator/services/angular-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=angulargenmanager::angulargenmanager" 
            continue
          elif [[ $directory == generator/services/angular-template-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=angtemplatemanager::angtemplatemanager" 
            continue
          elif [[ $directory == generator/services/reactv16-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=reactgenmanager::reactgenmanager" 
            continue
          elif [[ $directory == generator/services/configurationmanager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=configmanager::configmanager" 
            continue
          elif [[ $directory == generator/services/auth-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=authgenmanager::authgenmanager" 
            continue
          elif [[ $directory == generator/services/code-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=codegenmanager::codegenmanager" 
            continue
          elif [[ $directory == generator/services/ionic-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=ionicmanager::ionicmanager" 
            continue
          elif [[ $directory == generator/services/swagger-gen-manager/* ]]; then
            echo "::set-output name=microservices::commited"
            echo "::set-output name=swaggergenmanager::swaggergenmanager" 
            continue
          else
            echo "::set-output name=microservices::notcommited"
          fi
          done <<< "$FILE_DIFF"  
  Upload_build_notes:
    
    runs-on: self-hosted
    steps: 
      - uses: actions/checkout@v2
        with: 
          path: './'
      - name: Alpha value
        run: echo ::set-output name=ALPHA_NO::$(cat ./generator/services/configurationmanager/src/assests/configuration.json | jq -r '.base_config[0].value')
        id: alpha
      - name: Check alpha
        run: echo ${{ steps.alpha.outputs.ALPHA_NO }}
      - name: Split Alpha
        uses: xom9ikk/split@v1
        id: split1
        with:
          string: ${{ steps.alpha.outputs.ALPHA_NO }}
          separator: '-'
          limit: -1
      - name: Split action
        uses: xom9ikk/split@v1
        with:
          major: ${{ steps.split1.outputs._0 }}
          minor: ${{ steps.split1.outputs._1 }}
      - name: Alpha_Split Output
        run: echo "::set-output name=SPLIT_ALPHA::$(( ${{ steps.split1.outputs._1 }}+1 ))"
        id: splitalpha
      - name: Alpha number
        run: echo ${{ steps.splitalpha.outputs.SPLIT_ALPHA }}
      - name: Build version
        run: echo ::set-output name=JSON_NO::$(cat ./generator/services/configurationmanager/src/assests/configuration.json | jq -r '.base_config[1].value')
        id: json
      - name: Check version
        run: echo ${{ steps.json.outputs.JSON_NO }}
      - name: Split version code
        uses: xom9ikk/split@v1
        id: split
        with:
          string: ${{ steps.json.outputs.JSON_NO }}
          separator: .
          limit: -1
      - name: Build_Version action
        uses: xom9ikk/split@v1
        with:
          major: ${{ steps.split.outputs._0 }}
          minor: ${{ steps.split.outputs._1 }}
          patch: ${{ steps.split.outputs._2 }}
      - name: Adding the version
        run: echo $(( ${{ steps.split.outputs._2 }}+1 ))
      - name: Adding output
        run: echo "::set-output name=SPLIT::$(( ${{ steps.split.outputs._2 }}+1 ))"
        id: splitno
      - name: Check no
        run: echo ${{ steps.splitno.outputs.SPLIT }}
      - uses: actions/checkout@v2
        with: 
          path: './'      
      - run: |          
          echo "`jq '.base_config[0].value="${{ steps.split1.outputs._0 }}-${{ steps.splitalpha.outputs.SPLIT_ALPHA }}"' ./generator/services/configurationmanager/src/assests/configuration.json `" > ./generator/services/configurationmanager/src/assests/configuration.json
          echo "`jq '.base_config[1].value="${{ steps.split.outputs._0 }}.${{ steps.split.outputs._1 }}.${{ steps.splitno.outputs.SPLIT }}"' ./generator/services/configurationmanager/src/assests/configuration.json `" > ./generator/services/configurationmanager/src/assests/configuration.json 
      - uses: EndBug/add-and-commit@v6
        with:
          message: 'Add the version and date'
          add: './generator/services/configurationmanager/src/assests/configuration.json --force'
          cwd: './' 
          token: ${{ secrets.BUILDVERSION_BUILDDATE }}         
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
