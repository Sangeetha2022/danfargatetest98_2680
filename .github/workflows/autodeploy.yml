# This is a basic workflow to help you get started with Actions

name: autodeploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ autodeploy ]
  pull_request:
    branches: [ autodeploy ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
        configuration: ${{ steps.branch-commit.outputs.configuration }}
        branch: ${{ steps.ec2.outputs.short_ref }}
        instance: ${{ steps.branch-commit.outputs.instance }}
        hosts: ${{ steps.branch-commit.outputs.hosts }}
        bucket: ${{ steps.branch-commit.outputs.bucket }}
        instance_data_value: ${{ steps.ec2.outputs.INSTANCE_DEV }} 
        run_frontend_jobs: ${{ steps.frontend.outputs.ui}}
        run_backend_jobs: ${{ steps.Backend.outputs.backend }}
        microservices: ${{ steps.microservice.outputs.microservices }}
        container : 
                ${{ steps.microservice.outputs.gepfilemanager }} 
                
                ${{ steps.microservice.outputs.authproxy }}
                
              
                

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world! hi San
      - name: Instance State
        id: ec2
        run: |
          echo "::set-output name=INSTANCE_DEV::$(aws ec2 describe-instances --instance-ids i-082c02e8aa3853a62 | jq '.Reservations[].Instances[].State.Name')"
          echo "::set-output name=INSTANCE_STAGE::$(aws ec2 describe-instances --instance-ids i-09c99dd87883bc185 | jq '.Reservations[].Instances[].State.Name')"
          echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
      - name: branch check dev and stage
        id: branch-commit
        run: |
          if [ ${{steps.ec2.outputs.short_ref}} == 'dev' ]; then
          echo "::set-output name=instance::${{ steps.ec2.outputs.INSTANCE_DEV }}" 
          echo "::set-output name=hosts::ubuntu@ec2-34-197-46-177.compute-1.amazonaws.com"
          echo "::set-output name=bucket::geppetto-dev"
          echo "::set-output name=configuration::devops"
          elif [ ${{steps.ec2.outputs.short_ref}} == 'stage' ]; then
          echo "::set-output name=instance::${{steps.ec2.outputs.INSTANCE_STAGE}}" 
          echo "::set-output name=hosts::ubuntu@ec2-34-199-109-78.compute-1.amazonaws.com"
          echo "::set-output name=bucket::geppetto-stage"
          echo "::set-output name=configuration::production" 
          fi
      - name:  Status of Instance 
        run: |
          echo ${{steps.ec2.outputs.short_ref}} "is" ${{ steps.branch-commit.outputs.instance }}
      - uses: actions/checkout@v2
      - name: Check for changes
        id: diff
        run: |
          if [ $GITHUB_BASE_REF ]; then
          git fetch origin $GITHUB_BASE_REF --depth=1
          export FILE_DIFF=$( git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )
          echo "Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
          else
          git fetch origin ${{ github.event.before }} --depth=1
          export FILE_DIFF=$( git diff --name-only ${{ github.event.before }} $GITHUB_SHA )
          echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
          fi
          echo "$FILE_DIFF"
          echo "::set-output name=diff::$( echo "$FILE_DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
      - name: UI to build function
        id: frontend
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory != application/clients/desktop/* ]]; then
            echo "::set-output name=ui::notcommited" 
            continue
          else
            echo "::set-output name=ui::commited"
            break
          fi
          done <<< "$FILE_DIFF"
      - name: Backend function to build
        if: ${{ steps.branch-commit.outputs.instance }} == '"running"'
        id: Backend
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory != application/services/* && $directory != generator/services/*  ]]; then
            echo "::set-output name=backend::notcommited" 
            continue
          else
            echo "::set-output name=backend::commited"
            break
          fi
          done <<< "$FILE_DIFF"
      - name: Microservices to check run
        if: steps.Backend.outputs.backend == 'commited'
        id: microservice
        run: |
          FILE_DIFF="${{ steps.diff.outputs.diff }}"
          while read path;
          do
          directory="$( echo $path )"
          if [[ $directory == application/services/gepfilemanager/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=gepfilemanager::gepfilemanager"
            continue   
          elif [[ $directory == application/services/authproxy/* ]]; then
            echo "::set-output name=microservices::commited" 
            echo "::set-output name=Authproxy::authproxy"
            continue     
          
        
     
          
            echo "::set-output name=microservices::notcommited"
          fi
          done <<< "$FILE_DIFF"  
      - name: Creating the aws ECR for each micro service
        run: |
          aws ecr create-repository --repository-name gepfilemanager1 --tags Key=project_name,Value=${{ env.PROJECT_NAME }} Key=name,Value=${{ env.PROJECT_NAME }} --region us-east-1
          
          aws ecr create-repository --repository-name authproxy1 --tags Key=project_name,Value=${{ env.PROJECT_NAME }} Key=name,Value=${{ env.PROJECT_NAME }} --region us-east-1
          
  
          
           
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
